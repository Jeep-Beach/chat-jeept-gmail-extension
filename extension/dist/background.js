class d{constructor(){this.storage=new StorageManager,this.siteScraper=new SiteScraper,this.llmProvider=null,this.setupMessageListener(),this.initializeSettings()}async initializeSettings(){try{await this.storage.initializeSettings()}catch(e){console.error("Error initializing settings:",e)}}setupMessageListener(){chrome.runtime.onMessage.addListener((e,a,t)=>(this.handleMessage(e,a,t),!0))}async handleMessage(e,a,t){try{switch(e.type){case"JB_DRAFT_REQUEST":await this.handleDraftRequest(e,a,t);break;case"JB_FETCH_CONTEXT":await this.handleFetchContext(e,a,t);break;case"JB_REFRESH_SITE_CACHE":await this.handleRefreshSiteCache(e,a,t);break;case"JB_TEST_LLM":await this.handleTestLLM(e,a,t);break;default:t({error:"Unknown message type"})}}catch(r){console.error("Error handling message:",r),t({error:r.message})}}async handleDraftRequest(e,a,t){try{const r=await this.storage.getSyncData();this.llmProvider=new LLMProvider(r.apiKey);let s=e.emailContext;if(r.useGmailApi&&e.threadId)try{s=await this.fetchGmailContext(e.threadId)}catch(o){console.warn("Gmail API failed, falling back to DOM context:",o)}const i=await this.siteScraper.getJeepBeachContent(r.jeepBeachUrls),n=await this.llmProvider.generateDraft(s,i,r.tone,r.fallbackMessage);chrome.tabs.sendMessage(a.tab.id,{type:"JB_DRAFT_RESPONSE",draft:n})}catch(r){console.error("Error generating draft:",r),chrome.tabs.sendMessage(a.tab.id,{type:"JB_DRAFT_ERROR",error:r.message})}}async handleFetchContext(e,a,t){try{if(!e.threadId)throw new Error("Thread ID required for Gmail API");const r=await this.fetchGmailContext(e.threadId);t({context:r})}catch(r){console.error("Error fetching Gmail context:",r),t({error:r.message})}}async handleRefreshSiteCache(e,a,t){try{const r=await this.storage.getSyncData(),s=await this.siteScraper.fetchJeepBeachContent(r.jeepBeachUrls);await this.storage.setSiteCache(s),t({success:!0,message:"Site cache refreshed successfully"})}catch(r){console.error("Error refreshing site cache:",r),t({error:r.message})}}async handleTestLLM(e,a,t){try{const r=await this.storage.getSyncData();if(!r.apiKey)throw new Error("API key not configured");this.llmProvider=new LLMProvider(r.apiKey);const s=await this.llmProvider.testConnection();t({success:!0,response:s})}catch(r){console.error("Error testing LLM:",r),t({error:r.message})}}async fetchGmailContext(e){try{const a=await this.getGmailToken(),t=await fetch(`https://gmail.googleapis.com/gmail/v1/users/me/threads/${e}`,{headers:{Authorization:`Bearer ${a}`}});if(!t.ok)throw new Error(`Gmail API error: ${t.status}`);const s=(await t.json()).messages||[];if(s.length===0)throw new Error("No messages found in thread");let i=null;for(let c=s.length-1;c>=0;c--){const h=s[c];if(h.labelIds&&!h.labelIds.includes("SENT")){i=h;break}}if(!i)throw new Error("No inbound messages found");const n=await fetch(`https://gmail.googleapis.com/gmail/v1/users/me/messages/${i.id}`,{headers:{Authorization:`Bearer ${a}`}});if(!n.ok)throw new Error(`Gmail API error: ${n.status}`);const o=await n.json();return this.extractMessageBody(o)}catch(a){throw console.error("Error fetching Gmail context:",a),a}}extractMessageBody(e){var a,t,r,s,i;try{const n=((a=e.payload)==null?void 0:a.parts)||[];for(const o of n){if(o.mimeType==="text/plain"&&((t=o.body)!=null&&t.data))return this.decodeBase64Url(o.body.data);if(o.mimeType==="text/html"&&((r=o.body)!=null&&r.data)){const l=this.decodeBase64Url(o.body.data);return this.stripHtml(l)}}if((i=(s=e.payload)==null?void 0:s.body)!=null&&i.data){const o=this.decodeBase64Url(e.payload.body.data);return this.stripHtml(o)}return"No message body found"}catch(n){return console.error("Error extracting message body:",n),"Error extracting message body"}}decodeBase64Url(e){try{for(e=e.replace(/-/g,"+").replace(/_/g,"/");e.length%4;)e+="=";return decodeURIComponent(escape(atob(e)))}catch(a){return console.error("Error decoding base64:",a),e}}stripHtml(e){try{const t=new DOMParser().parseFromString(e,"text/html");t.querySelectorAll("script, style").forEach(i=>i.remove());let s=t.body?t.body.textContent:"";return s=s.replace(/\s+/g," ").trim(),s}catch(a){return console.error("Error stripping HTML:",a),e}}async getGmailToken(){return new Promise((e,a)=>{chrome.identity.getAuthToken({interactive:!0},t=>{chrome.runtime.lastError?a(new Error(chrome.runtime.lastError.message)):t?e(t):a(new Error("No token received"))})})}}new d;
